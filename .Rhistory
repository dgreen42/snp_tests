library(qqman)
data <- read.csv('Downloads/ORCDRC_all_SNPs_for_percentiles.csv')
data <- read.csv('ORCDRC_all_SNPs_for_percentiles.csv')
manhattan(data, chr = "Chr", bp = "Pos", p = "p", snp = "X")
ph2_data <- read.csv("pH2_all_SNPs_for_percentiles.csv")
latd_snps <- read.csv("MtLATD SNP data.csv")
fset <- read.csv("Medicago_fset_climatic-country.csv")
fset <- read.csv("Medicago_fset_climatic-country.csv")
View(ph2_data)
View(fset)
fset <- fset[2:nrow(fset),]
plot(pecrc1 ~ HM_NUMBER, fset)
plot(pecrc_1 ~ HM_NUMBER, fset)
plot(perc_1 ~ HM_NUMBER, fset)
plot(prec_1 ~ HM_NUMBER, fset)
boxplot(prec_1 ~ HM_NUMBER, fset)
boxplot(prec_1 ~ HM_NUMBER, fset[prec_1 > 100, ])
boxplot(prec_1 ~ HM_NUMBER, fset[fset$prec_1 > 100, ])
boxplot(prec_1 ~ Country, fset[fset$prec_1 > 100, ])
install.packages('ggplot2')
base_world
install.packages(
install.packages('maps', 'mapdata', 'maptools')
install.packages('maps')
install.packages('mapdata')
install.packages('maptools')
library(maps)
library(mapdata)
library(maptools)
?map
?mapproject
map(database = "world")
points(fset$LON, fset$LAT)
?get_map
?`maptools-deprecated`
library(ggplot2)
library(ggplot)
library(ggplot2)
install.packages('ggmap')
ggmap(map_HM) +
geom_point(data = df(fset$LON, fset$LAT), aes(x = fset$LON, y = fset$LAT, fill = "red", alpha = 0.8)) =
guides(fill = F, alpha = F, size = F)
map_HM <- get_map(maptype = "satellite", scale = 2)
library(qqman)
library(maps)
library(ggmap)
library(ggplot2)
install.packages('httr')
install.packages('curl')
install.packages('curl')
install.packages('httr')
install.packages('ggmap')
library(ggmap)
map_HM <- get_map(maptype = "satellite", scale = 2)
map_HM <- map("world")
ggmap(map_HM) +
geom_point(data = df(fset$LON, fset$LAT), aes(x = fset$LON, y = fset$LAT, fill = "red", alpha = 0.8)) =
guides(fill = F, alpha = F, size = F)
register_google()
library(mapdata)
library(qqman)
library(maps)
library(mapdata)
?mapdata
fset <- read.csv("Medicago_fset_climatic-country.csv")
fset <- fset[2:nrow(fset),]
map_HM <- map("world")
map.axes()
fset
points(fset$LAT, fset$LON)
points(fset$LON, fset$LAT)
map_HM <- map("world")
map.axes()
points(fset$LON, fset$LAT)
?map
map_HM <- map("world", xlim = c(min(fset$LAT), max(fset$LAT)), ylim = c(min(fset$LON), max(fset$LAT)))
map.axes()
points(fset$LON, fset$LAT)
map_HM <- map("world")
map_HM <- map("world")
map.axes()
map_HM <- map("world", xlim = c(-20, 60), ylim = c(-20, 20))
map_HM <- map("world", xlim = c(-20, 60), ylim = c(-20, 40))
map.axes()
map_HM <- map("world", xlim = c(-20, 60), ylim = c(-20, 100))
map_HM <- map("world", xlim = c(-20, 60), ylim = c(-20, 50))
map.axes()
map_HM <- map("world", xlim = c(-20, 60), ylim = c(-20, 50))
map.axes()
points(fset$LON, fset$LAT)
map_HM <- map("world", xlim = c(-20, 60), ylim = c(-10, 50))
map.axes()
points(fset$LON, fset$LAT)
points(fset$LON, fset$LAT, col = "red", pch = 16)
points(fset$LON, fset$LAT, col = fset$Country, pch = 16)
col_country <- factor(fset$Country)
col_country
cols <- colors()
col_country <- cols[factor(fset$Country)]
col_country
col_country <- cols[factor(fset$Country)] + 10
col_country <- cols[factor(fset$Country)]
map_HM <- map("world", xlim = c(-20, 60), ylim = c(-10, 50))
map.axes()
points(fset$LON, fset$LAT, col = col_country, pch = 16)
?colors()
cols <- colors(distinct = T)
col_country <- cols[factor(fset$Country)]
map_HM <- map("world", xlim = c(-20, 60), ylim = c(-10, 50))
map.axes()
points(fset$LON, fset$LAT, col = col_country, pch = 16)
cols[10:24}
cols[10:24]
map_HM <- map("world", xlim = c(-20, 60), ylim = c(-10, 50))
map.axes()
points(fset$LON, fset$LAT, col = col_country, pch = 16)
cols <- colors(distinct = T)
cols[10:24]
cols <- cols[10:24]
col_country <- cols[factor(fset$Country)]
map_HM <- map("world", xlim = c(-20, 60), ylim = c(-10, 50))
map.axes()
points(fset$LON, fset$LAT, col = col_country, pch = 16)
cols <- cols[30:44]
col_country <- cols[factor(fset$Country)]
map_HM <- map("world", xlim = c(-20, 60), ylim = c(-10, 50))
map.axes()
points(fset$LON, fset$LAT, col = col_country, pch = 16)
cols
cols <- colors(distinct = T)
length(cols)
cols
cols <- colors(distinct = T)
cols
cols <- cols[24:35]
col_country <- cols[factor(fset$Country)]
map_HM <- map("world", xlim = c(-20, 60), ylim = c(-10, 50))
map.axes()
points(fset$LON, fset$LAT, col = col_country, pch = 16)
countries <- factor(fset$Country)
countries
countries[2]
countries[1]
countries[4]
countries <- levels(factor(fset$Country))
countries
?legend
legend(x = "right",
legend = countries,
col = col_country)
col_country
col_country <- cols[factor(fset$Country)]
countries <- levels(factor(fset$Country))
map_HM <- map("world", xlim = c(-20, 60), ylim = c(-10, 50))
map.axes()
points(fset$LON, fset$LAT, col = col_country, pch = 16)
map_HM <- map("world", xlim = c(-20, 60), ylim = c(20, 50))
map.axes()
points(fset$LON, fset$LAT, col = col_country, pch = 16)
countries <- levels(factor(fset$Country))
map_HM <- map("world", xlim = c(-20, 60), ylim = c(20, 50))
map.axes()
points(fset$LON, fset$LAT, col = col_country, pch = 16)
cols
legend(x = "right",
legend = countries,
col = cols)
cols <- colors(distinct = T)
cols <- cols[24:35]
col_country <- cols[factor(fset$Country)]
countries <- levels(factor(fset$Country))
map_HM <- map("world", xlim = c(-20, 60), ylim = c(20, 50))
map.axes()
points(fset$LON, fset$LAT, col = col_country, pch = 16)
legend(x = "right",
legend = countries,
col = cols)
legend(x = "right",
legend = countries,
col = cols,
pch = 16)
cols <- c(a6cee3,
1f78b4,
#plot to map
library(viridis)
pallete
palette(()
palette()
colorRampPalette(
)
install.packages('RColorBrewer')
library(RColorBrewer)
display.brewer.all()
pallete <- brewer.pal()
pallete <- brewer.pal("Paired")
colo\
colorRampPalette()
palette.pals()
palette.colors()
pallete <- pellete.pals("Accent")
pallete <- pallete.pals("Accent")
pallete <- palette.pals("Accent")
?palette()
pallete <- palette("Accent")
col_country <- cols[factor(fset$Country)]
rm(cols)
palette
palette(1:14)
pallete <- palette.colors(n = 14, palette = "Accent", recycle = F)
palette.pals()
pallete <- palette.colors(n = 14, palette = "Set 1", recycle = F)
pallete <- palette.colors(n = 14, palette = "Paired", recycle = F)
palette(R3)
palette("R3")
pallete <- palette.colors(n = 14, palette = "Alphabet", recycle = F)
pallete
col_country
countries
points(fset$LON, fset$LAT, col = pallete, pch = 16)
points(fset$LON, fset$LAT, col = pal, pch = 16)
pal <- palette.colors(n = 14, palette = "Alphabet", recycle = F)
countries <- levels(factor(fset$Country))
map_HM <- map("world", xlim = c(-20, 60), ylim = c(20, 50))
map.axes()
points(fset$LON, fset$LAT, col = pal, pch = 16)
legend(x = "right",
legend = countries,
col = cols,
pch = 16)
source("~/Documents/Academic/UVM/Harris_Lab/Sami Connolly/snp_tests/snp_tests.R", echo=TRUE)
pal <- palette.colors(n = 14, palette = "Alphabet", recycle = F)
countries <- levels(factor(fset$Country))
map_HM <- map("world", xlim = c(-20, 60), ylim = c(20, 50))
map.axes()
points(fset$LON, fset$LAT, col = pal, pch = 16)
legend(x = "right",
legend = countries,
col = pal,
pch = 16)
rm(pallete)
rm(data)
View(fset)
for(i in countries) {
print(i)
}
c_cols <- NULL
for (i in 1:nrow(fset)) {
c_cols <- NULL
for (i in 1:nrow(fset)) {
for(j in countries) {
if (fset$Country == j) {
c_cols[i] <- pal[i]
}
}
}
c_cols <- NULL
for (i in 1:nrow(fset)) {
for(j in countries) {
if (fset$Country[i] == j) {
c_cols[i] <- pal[i]
}
}
}
print(c_cols)
c_cols <- NULL
for(j in countries) {
for (i in 1:nrow(fset)) {
if (fset$Country[i] == j) {
c_cols[i] <- pal[i]
}
}
}
print(c_cols)
c_cols <- NULL
c_cols <- NULL
for(j in countries) {
for (i in 1:nrow(fset)) {
if (fset$Country[i] == j) {
c_cols[i] <- pal[j]
}
}
}
print(c_cols)
colnames(pal) <- countries
lapply(fset$Country, colors())
col_list <- list(
countries = pal
)
col_list
countries
vector1 <- c(1, 2, 3)
vector2 <- c(4, 5, 6)
# Create a list with two vectors
my_list <- list(vector_a = vector1, vector_b = vector2)
# Set the values of vector_b in the list equal to the values of vector_a
my_list$vector_b <- my_list$vector_a
my_list
col_df <- data.frame(col = pal, c = countries)
map_HM <- map("world", xlim = c(-20, 60), ylim = c(20, 50))
map.axes()
points(fset$LON, fset$LAT, col = col_df, pch = 16)
map_HM <- map("world", xlim = c(-20, 60), ylim = c(20, 50))
map.axes()
points(fset$LON, fset$LAT, pch = 16)
latd_snps <- read.csv("MtLATD SNP data.csv")
View(latd_snps)
data <- read.csv('ORCDRC_all_SNPs_for_percentiles.csv')
manhattan(data, chr = "Chr", bp = "Pos", p = "p", snp = "X", highlight = latd_snps$X.2.POS)
data$Pos
latd_snps$X.2.POS
View(latd_snps)
View(fset)
install.packages('BiocManager')
install.packages("devtools")
pkgs <- c("SeqArray", "GenomicRanges", "rtracklayer", "Biostrings", "BSgenome", "plyranges")
BiocManager::install(pkgs)
devtools::install_github("CMWbio/geaR")
